#pragma once

#include <string>
#include <set>
#include <fstream>
#include <unordered_map>
#include <filesystem>
#include "string_processing.h"

class CrackCipherSystem
{
public:
	inline static std::string DICT_NAME = "dictionary.txt";
	CrackCipherSystem();

	using StringFreqs = std::unordered_map<std::string, size_t>;
	using Words = std::set<std::string_view>;

	std::string crack(std::filesystem::path path_to_file);

private:

	std::string dict_text_;
	std::string source_text_;
	std::string encrypted_text_;
	
	Words dictionary_words_;
	Words source_words_;

	std::unordered_map<char, char> source_to_dict_char_;
	std::unordered_map<char, char> dict_to_source_char_;

	std::vector<std::string> GetSortedFreqsChars(StringFreqs& freqs);

	void ConversionLetters();

	double GetPercRecognizedWords() const;

	void Correction(int len, int max_diff);

	void ProcessGrams(int max_len, int max_num_str);

	std::string GetFilteredStringFromFile(std::istream& in);

	StringFreqs CountGrams(std::string& text, int len) {
		StringFreqs result;
		for (size_t i = 0; i + len - 1 < text.size(); ++i) {
			auto gram = text.substr(i, len);
			if (gram.find(' ') == std::string::npos) {
				++result[gram];
			}
		}
		return result;
	}
};

